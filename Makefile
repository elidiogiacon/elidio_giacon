# =========================
# Vari√°veis
# =========================
PYTHON = python
SCRIPTS_DIR = scripts
ROOT = $(shell pwd)
export PYTHONPATH = $(ROOT)

# =========================
# Etapa 1 - Web Scraping
# =========================
etapa1:
	@echo "üåê Etapa 1 - Download e Compacta√ß√£o de Anexos da ANS"
	$(PYTHON) -m $(SCRIPTS_DIR).download_anexos

# =========================
# Etapa 2 - Transforma√ß√£o de Dados
# =========================
etapa2:
	@echo "üìÑ Etapa 2 - Extra√ß√£o e Limpeza de Tabelas do PDF"
	$(PYTHON) -m $(SCRIPTS_DIR).extract_tables

# =========================
# Etapa 3.0 - Coleta de Dados Complementares
# =========================
etapa3-downloader:
	@echo "üì• Etapa 3.0 - Download de Dados da ANS (CADOP + Demonstrativos Cont√°beis)"
	$(PYTHON) -m $(SCRIPTS_DIR).download_dados_operadoras
	$(PYTHON) -m $(SCRIPTS_DIR).download_demonstracoes_contabeis

# =========================
# Etapa 3.1 - Valida√ß√£o e Identifica√ß√£o de Campos
# =========================
etapa3-identify:
	@echo "üß† Etapa 3.1 - An√°lise do Dicion√°rio e CSV de Operadoras"
	$(PYTHON) -m $(SCRIPTS_DIR).identify_fields

# =========================
# Etapa 3.2 - Cria√ß√£o do Banco de Dados e Tabelas
# =========================
etapa3-db:
	@echo "üèóÔ∏è Etapa 3.2 - Cria√ß√£o de banco e execu√ß√£o do script SQL"
	$(PYTHON) -m $(SCRIPTS_DIR).create_database_and_tables

# =========================
# Etapa 3.3 - Importa√ß√£o de Dados no MySQL
# =========================
etapa3-import:
	@echo "üì§ Etapa 3.3 - Importa√ß√£o do CSV para a tabela MySQL"
	$(PYTHON) -m $(SCRIPTS_DIR).import_csv_to_mysql

# =========================
# Etapa 3.4 - Processamento de Despesas Cont√°beis
# =========================
etapa3-despesas:
	@echo "üìä Etapa 3.4 - Processamento das Despesas Cont√°beis"
	$(PYTHON) -m $(SCRIPTS_DIR).processar_despesas
	$(PYTHON) -m $(SCRIPTS_DIR).import_despesas_to_mysql

# =========================
# Etapa 4 - Visualiza√ß√£o (API + Frontend)
# =========================

etapa4-api:
	@echo "üöÄ Iniciando API com FastAPI (localhost:8000)"
	cd api && uvicorn main:app --reload

etapa4-frontend:
	@echo "üé® Iniciando Frontend Vue (localhost:5173)"
	cd frontend && npm run dev

etapa4:
	@echo "üåê Etapa 4 - Executando API e Frontend (paralelamente)"
	(cd api && uvicorn main:app --reload) & \
	(cd frontend && npm run dev) & \
	wait

# =========================
# Scanner de P√°ginas com Tabelas (PDF)
# =========================
scan:
	@echo "üîé Scanner de Tabelas no PDF (Etapa Extra)"
	$(PYTHON) -m $(SCRIPTS_DIR).scan_pdf_tables

# =========================
# Visualiza√ß√£o
# =========================
sql:
	@echo "üìú Visualizando conte√∫do do scripts.sql"
	@cat output/sql/scripts.sql

diff:
	@echo "üìã Diferen√ßas entre o dicion√°rio de dados e o CSV"
	@cat output/logs/diff_log.txt

# =========================
# Limpeza
# =========================
clean:
	@echo "üßπ Limpando arquivos gerados durante a execu√ß√£o"
	@rm -f output/sql/scripts.sql
	@rm -f output/logs/*.log
	@rm -f output/csv/*.csv
	@rm -f output/zips/*.zip
	@rm -f output/anexos/*.pdf

# =========================
# Banco de Dados - Reset Total
# =========================
db-reset:
	@echo "üîÅ Resetando container e volume do banco MySQL (Docker)"
	docker-compose down -v
	docker-compose up -d

# =========================
# Gera√ß√£o Autom√°tica do init.sql a partir do .env
# =========================
init-sql:
	@echo "‚öôÔ∏è Gerando docker/mysql/init.sql baseado no .env..."
	$(PYTHON) generate_init_sql.py

# =========================
# Execu√ß√£o Total
# =========================
all: etapa1 etapa2 etapa3-downloader etapa3-identify etapa3-db etapa3-import etapa3-despesas

all-clean: clean db-reset init-sql all

# =========================
# Verifica√ß√£o de Pr√©-Requisitos
# =========================
check:
	@echo "üîç Verificando pr√©-requisitos do ambiente..."
	@test -f .env || (echo '‚ùå Arquivo .env n√£o encontrado!' && exit 1)
	@test -f docker-compose.yml || (echo '‚ùå docker-compose.yml n√£o encontrado!' && exit 1)
	@mkdir -p output/logs output/csv output/sql output/zips output/anexos || true
	@echo '‚úÖ Ambiente verificado com sucesso.'

# =========================
# Ajuda
# =========================
help:
	@echo "üõ†Ô∏è Comandos dispon√≠veis:"
	@echo "  make check              ‚Üí Verifica estrutura m√≠nima do projeto"
	@echo "  make init-sql           ‚Üí Gera docker/mysql/init.sql a partir do .env"
	@echo "  make etapa1             ‚Üí Baixa PDFs da ANS e gera ZIP"
	@echo "  make etapa2             ‚Üí Extrai e transforma tabelas do PDF"
	@echo "  make etapa3-downloader  ‚Üí Baixa arquivos CADOP e .zip da ANS"
	@echo "  make etapa3-identify    ‚Üí Valida estrutura CSV com dicion√°rio"
	@echo "  make etapa3-db          ‚Üí Cria banco de dados com base no .sql"
	@echo "  make etapa3-import      ‚Üí Importa dados do CSV para MySQL"
	@echo "  make etapa3-despesas    ‚Üí Processa e importa despesas cont√°beis"
	@echo "  make etapa4-api         ‚Üí Inicia constru√ß√£o da API + Frontend"
	@echo "  make scan               ‚Üí Escaneia PDF para detectar p√°ginas com tabelas"
	@echo "  make sql                ‚Üí Exibe o script SQL gerado"
	@echo "  make diff               ‚Üí Mostra diferen√ßas entre CSV e Dicion√°rio"
	@echo "  make clean              ‚Üí Remove arquivos tempor√°rios"
	@echo "  make db-reset           ‚Üí Reseta o volume Docker e reinicia o MySQL"
	@echo "  make all                ‚Üí Executa todas as etapas do projeto"
	@echo "  make all-clean          ‚Üí Limpa tudo e executa o pipeline completo"