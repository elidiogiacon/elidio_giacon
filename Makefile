# =========================
# Vari√°veis
# =========================
PYTHON = python
SCRIPTS_DIR = scripts
ROOT = $(shell pwd)
export PYTHONPATH = $(ROOT)

# =========================
# Etapa 1 - Web Scraping
# =========================
etapa1:
	@echo "üåê Executando Etapa 1 - Download e Compacta√ß√£o de Anexos..."
	$(PYTHON) -m $(SCRIPTS_DIR).download_anexos

# =========================
# Etapa 2 - Transforma√ß√£o de Dados
# =========================
etapa2:
	@echo "üìÑ Executando Etapa 2 - Extra√ß√£o de Tabelas do PDF..."
	$(PYTHON) -m $(SCRIPTS_DIR).extract_tables

# =========================
# Etapa 3.1 - Identifica√ß√£o de Campos
# =========================
etapa3-identify:
	@echo "üß† Executando Etapa 3.1 - Verificando estrutura de campos..."
	$(PYTHON) -m $(SCRIPTS_DIR).identify_fields

# =========================
# Etapa 3.2 - Cria√ß√£o do Banco e Tabela
# =========================
etapa3-db:
	@echo "üèóÔ∏è Executando Etapa 3.2 - Criando banco e tabela no MySQL..."
	$(PYTHON) -m $(SCRIPTS_DIR).create_database_and_tables

# =========================
# Etapa 3.3 - Importa√ß√£o do CSV para o MySQL
# =========================
etapa3-import:
	@echo "üì• Executando Etapa 3.3 - Importando CSV para o MySQL..."
	$(PYTHON) -m $(SCRIPTS_DIR).import_csv_to_mysql

# =========================
# Etapa 4 - API (placeholder)
# =========================
etapa4-api:
	@echo "üîß Executando Etapa 4 - Backend/Frontend em desenvolvimento..."

# =========================
# Scanner de p√°ginas com tabelas no PDF
# =========================
scan:
	@echo "üîé Executando Scanner de P√°ginas com Tabelas no PDF..."
	$(PYTHON) -m $(SCRIPTS_DIR).scan_pdf_tables

# =========================
# Ver conte√∫do SQL gerado
# =========================
sql:
	@echo "üìú Conte√∫do do scripts.sql:"
	@cat output/sql/scripts.sql

# =========================
# Ver diferen√ßas CSV vs Dicion√°rio
# =========================
diff:
	@echo "üîç Diferen√ßas detectadas entre CSV e Dicion√°rio:"
	@cat output/logs/diff_log.txt

# =========================
# Limpar arquivos gerados
# =========================
clean:
	@echo "üßπ Limpando arquivos gerados..."
	@rm -f output/sql/scripts.sql
	@rm -f output/logs/diff_log.txt
	@rm -f output/logs/etapa2_failures.log
	@rm -f output/csv/*.csv
	@rm -f output/zips/*.zip
	@rm -f output/anexos/*.pdf

# =========================
# Resetar o banco de dados (MySQL)
# =========================
db-reset:
	@echo "üîÅ Resetando o banco de dados e volume do MySQL..."
	docker-compose down -v
	docker-compose up -d

# =========================
# Rodar todas as etapas
# =========================
all: etapa1 etapa2 etapa3-identify etapa3-db etapa3-import

# =========================
# Ajuda
# =========================
help:
	@echo "üõ†Ô∏è Comandos dispon√≠veis:"
	@echo "  make etapa1           ‚Üí Baixa PDFs e gera ZIP (Etapa 1)"
	@echo "  make etapa2           ‚Üí Extrai tabelas do PDF, gera CSV e ZIP (Etapa 2)"
	@echo "  make etapa3-identify  ‚Üí Verifica campos e gera scripts.sql (Etapa 3.1)"
	@echo "  make etapa3-db        ‚Üí Cria banco e tabelas no MySQL (Etapa 3.2)"
	@echo "  make etapa3-import    ‚Üí Importa dados do CSV para o MySQL (Etapa 3.3)"
	@echo "  make etapa4-api       ‚Üí (placeholder) Rota de API com busca textual (Etapa 4)"
	@echo "  make scan             ‚Üí Detecta p√°ginas com tabelas no PDF"
	@echo "  make sql              ‚Üí Mostra conte√∫do do SQL"
	@echo "  make diff             ‚Üí Mostra diferen√ßas entre CSV e Dicion√°rio"
	@echo "  make clean            ‚Üí Remove arquivos tempor√°rios"
	@echo "  make all              ‚Üí Executa todas as etapas anteriores"
	@echo "  make db-reset         ‚Üí Remove volume do MySQL e reinicia container"
